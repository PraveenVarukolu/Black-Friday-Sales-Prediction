# -*- coding: utf-8 -*-
"""Black Friday Dataset-Linear Regression Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IJdM0lsxz7fljcJCwSWB-lYrSntXv0YV

- In this we are going to predict the purchasing amount of customers during Black Friday, using various features such as age, gender, marital status.
- The dataset we are going to use is the Black Friday dataset from Kaggle which contains about 550068 rows and 12 features that can be downloaded
- The dataset contains the labels which we have to predict and the labels are continuous. So the problem we have is a Supervised Regression type.

## Import libraries
"""

# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""## Importing dataset"""

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

"""## Descriptive analysis"""

# Preview training dataset
train.head()

# Preview testing dataset
test.head()

# Training dataset dimensions - (rows, columns)
print('Training data: \nRows: {} Columns: {}'.format(train.shape[0], train.shape[1]))

train.shape

test.shape

# Features data-type
train.info()

train.describe()

# Statistical summary
train.describe().T

train.apply(lambda x: len(x.unique()))

"""## Checking for Null values"""

train.isnull()

train.isnull().sum()

# Checking for Null values
round((train.isnull().sum() / train.shape[0]) * 100, 2).astype(str) + ' %'

"""## Age :"""

train['Age'].value_counts()

# Checking the % counts of unique values
round((train['Age'].value_counts(normalize = True).mul(100)), 2).astype(str) + ' %'

"""## Stay_In_Current_City_Years :"""

train['Stay_In_Current_City_Years'].value_counts()

# Checking the % counts of unique values
round((train['Stay_In_Current_City_Years'].value_counts(normalize = True).mul(100)), 2).astype(str) + ' %'

train['Product_Category_1'].value_counts()

round((train['Product_Category_1'].value_counts(normalize = True).mul(100)), 2).astype(str) + ' %'

round((train['Product_Category_2'].value_counts(normalize = True).mul(100)), 2).astype(str) + ' %'

round((train['Product_Category_3'].value_counts(normalize = True).mul(100)), 2).astype(str) + ' %'

"""## Observations : 
- The feature 'Product_Category_2' contains 31.57% null values which can be imputed whereas 'Product_Category_3' contains 69.67% null values so we can drop this feature.
- The features 'Age' and 'Stay_In_Current_City_Years' contain some values which have '+' in them which need to be replaced.

## Exploratory Data Analysis:

### Univariate Analysis:
####  'Purchase':
"""

plt.style.use('ggplot')
plt.figure(figsize = (20, 7))
sns.distplot(train['Purchase'], bins = 20, color='GREEN')
plt.title('Distribution of Purchase Amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 30, 'fontweight' : 'bold'})
plt.xlabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20})
plt.ylabel('Number of people', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20})
plt.tick_params(labelsize = 15)
plt.show()

"""### Creating a barplot for 'Gender'"""

gen = train['Gender'].value_counts()
plt.figure(figsize = (6, 6))
plt.style.use('seaborn-whitegrid')
sns.barplot(gen.index, gen.values, palette = 'bright')
plt.title('Distribution of Gender', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20, 'fontweight' : 'bold'})
plt.xlabel('Gender', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.ylabel('Number of people', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.tick_params(labelsize = 10)
plt.show()

"""### Creating a pie chart for 'City Category'"""

city = train['City_Category'].value_counts()
plt.style.use('seaborn')
plt.figure(figsize = (10, 7))
plt.pie(city.values, labels = city.index, startangle = 30, explode = (0 , 0.20, 0), shadow = True, autopct = '%1.1f%%')
plt.title('City category distribution', fontdict = {'fontname' : 'Monospace', 'fontsize' : 30, 'fontweight' : 'bold'})
plt.legend()
plt.legend(prop = {'size' : 20})
plt.axis('equal')
plt.show()

"""### Creating a donut chart for 'Age'"""

age = train['Age'].value_counts()
plt.style.use('bmh')
plt.figure(figsize = (10, 5))
plt.pie(age.values, labels = age.index, startangle = 50, autopct = '%1.1f%%')
centre_circle = plt.Circle((0, 0), 0.7, fc = 'white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.title('Age distribution', fontdict = {'fontname' : 'Monospace', 'fontsize' : 30, 'fontweight' : 'bold'})
plt.axis('equal')
plt.legend(prop = {'size' : 20})
plt.show()

"""### Creating a barplot for 'Occupation'"""

occupation = train['Occupation'].value_counts()

plt.figure(figsize = (20, 6))
plt.style.use('seaborn-whitegrid')
sns.barplot(occupation.index, occupation.values, palette = 'Paired')
plt.title('Occupation wise Distribution', fontdict = {'fontname' : 'Monospace', 'fontsize' : 30, 'fontweight' : 'bold'})
plt.xlabel('Occupation code', fontdict = {'fontname' : 'Monospace', 'fontsize' : 25})
plt.ylabel('Number of people', fontdict = {'fontname' : 'Monospace', 'fontsize' : 25})
plt.tick_params(labelsize = 20)
plt.show()

"""### Creating a countplot for 'Marital Status'"""

plt.style.use('seaborn')
plt.figure(figsize = (7, 6))
sns.countplot(train['Marital_Status'])
plt.title('Marital Status Distribution', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20, 'fontweight' : 'bold'})
plt.xlabel('Marital Status', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.ylabel('Number of people', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.tick_params(labelsize = 10)
plt.show()

"""### Creating a Treemap for 'Stay_In_Current_City_Years'"""

stay = train['Stay_In_Current_City_Years'].value_counts()

import squarify
plt.style.use('default')
plt.figure(figsize = (7, 5))
squarify.plot(sizes = stay.values, label = stay.index, value = stay.values)
plt.title('Stay in current city distribution', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20, 'fontweight' : 'bold'})
plt.show()

"""### Bivariate Analysis:

### Creating a barplot of 'Occupation vs Purchase'
"""

plt.figure(figsize = (10, 5))
plt.style.use('seaborn')
sns.barplot(train['Occupation'], train['Purchase'], palette = 'Paired')
plt.title('Purchase amount across Occupation', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20, 'fontweight' : 'bold'})
plt.xlabel('Occupation code', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.ylabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.tick_params(labelsize = 15)
plt.show()

"""### Creating a boxplot of 'Age vs Purchase'"""

plt.style.use('bmh')
sns.boxplot(train['Age'], train['Purchase'], palette = 'colorblind')
plt.title('Purchase amount across Age', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20, 'fontweight' : 'bold'})
plt.xlabel('Age', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.ylabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.tick_params(labelsize = 10)
plt.grid()
plt.show()

"""### Creating a barplot of 'Gender vs Purchase'"""

plt.style.use('default')
sns.barplot(train['Gender'], train['Purchase'])
plt.title('Purchase amount across Gender', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15, 'fontweight' : 'bold'})
plt.xlabel('Gender', fontdict = {'fontname' : 'Monospace', 'fontsize' : 10})
plt.ylabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 10})
plt.tick_params(labelsize = 7)
plt.show()

"""### Creating a barplot of 'City_Category vs Purchase'"""

plt.style.use('bmh')
sns.barplot(train['City_Category'], train['Purchase'])
plt.title('Purchase amount across City Category', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15, 'fontweight' : 'bold'})
plt.xlabel('City Category', fontdict = {'fontname' : 'Monospace', 'fontsize' : 10})
plt.ylabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 10})
plt.tick_params(labelsize = 7)
plt.show()

"""### Creating a barplot of 'Product_Category_1 vs Purchase'"""

plt.style.use('default')
plt.figure(figsize = (20, 7))
sns.barplot(train['Product_Category_1'], train['Purchase'], palette = 'colorblind')
plt.title('Purchase amount across Product Category', fontdict = {'fontname' : 'Monospace', 'fontsize' : 20, 'fontweight' : 'bold'})
plt.xlabel('Product Category_1', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.ylabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15})
plt.tick_params(labelsize = 20)
plt.grid()
plt.show()

"""### Creating a barplot of 'Marital Status vs Purchase'"""

plt.style.use('ggplot')
plt.figure(figsize = (6, 3))
sns.barplot(train['Marital_Status'], train['Purchase'])
plt.title('Purchase amount across Marital Status', fontdict = {'fontname' : 'Monospace', 'fontsize' : 15, 'fontweight' : 'bold'})
plt.xlabel('Marital Status', fontdict = {'fontname' : 'Monospace', 'fontsize' : 10})
plt.ylabel('Purchase amount', fontdict = {'fontname' : 'Monospace', 'fontsize' : 10})
plt.tick_params(labelsize = 7)
plt.show()

"""### Multivariate Analysis:"""

# Creating a Pairplot for all features
plt.style.use('default')
sns.pairplot(train)
plt.show()

# Creating a heatmap of correlation matrix
sns.heatmap(train.corr(), annot = True)
plt.show()

"""- An interesting observation can be made from the gender distribution plot that the number of females was less than the number of men who shopped during Black Friday.
- From the correlation heatmap, we can observe that the dependent feature 'Purchase' is highly correlated with 'Product_Category_1' and 'Product_Category_2'.

## Data Preprocessing:

### Merging of train and test
"""

train['source'] = 'train'
test['source'] = 'test'

dataset = pd.concat([train, test])

# Creating a heatmap of correlation matrix
sns.heatmap(dataset.corr(), annot = True)
plt.show()

"""### Replacing '+' in 'Age' and 'Stay_In_Current_City_Years'"""

dataset['Age'] = dataset['Age'].apply(lambda x : str(x).replace('55+', '55'))

dataset['Stay_In_Current_City_Years'] = dataset['Stay_In_Current_City_Years'].apply(lambda x : str(x).replace('4+', '4'))

"""### Dropping irrelevant features:"""

dataset.drop('Product_Category_3', axis = 1, inplace = True)

dataset.drop('Product_Category_2',axis=1,inplace=True)

dataset.drop('User_ID', axis = 1, inplace = True)

dataset.drop('Product_ID', axis = 1, inplace = True)

dataset

dataset["Age"].unique()

dataset.shape

"""### Feature Encoding:"""

from sklearn.preprocessing import LabelEncoder

label_encoder_gender = LabelEncoder()
dataset['Gender'] = label_encoder_gender.fit_transform(dataset['Gender'])
dataset['Gender']

label_encoder_age = LabelEncoder()
dataset['Age'] = label_encoder_age.fit_transform(dataset['Age'])

label_encoder_city = LabelEncoder()
dataset['City_Category'] = label_encoder_city.fit_transform(dataset['City_Category'])

"""### Converting 'Stay_In_Current_City_Years' into numeric data type"""

dataset['Stay_In_Current_City_Years'] = dataset['Stay_In_Current_City_Years'].astype('int')

"""### Separating Dataset into train and test:"""

train = dataset.loc[dataset['source'] == 'train']
test = dataset.loc[dataset['source'] == 'test']

train.drop('source', axis = 1, inplace = True)
test.drop('source', axis = 1, inplace = True)

"""### Separating train into X and Y"""

X = train.drop("Purchase", axis = 1)

Y = train["Purchase"]

"""### Creating a train test split"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 123)

print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
print("Y_train shape:", Y_train.shape)
print("Y_test shape:", Y_test.shape)

X_train.head()

"""## ML Model Implementation:

### Linear Regression:
"""

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()

lin_reg.fit(X_train, Y_train)

Y_pred_lin_reg = lin_reg.predict(X_test)
len(Y_pred_lin_reg)
Y_pred_lin_reg

X_test.head()

features=["0","3","12","2","1","0","11"]

int_features = [int(x) for x in features]
final_features = [np.array(int_features)]

Y_predicted = lin_reg.predict(final_features)

print(Y_predicted)

import pickle

pickle.dump(lin_reg,open(r"C:\Users\DELL\OneDrive\Desktop\Desktop Files\Practice\Projects\Black Friday Datset\LinearModel.pkl","wb"))

LinearModel=pickle.load(open(r"C:\Users\DELL\OneDrive\Desktop\Desktop Files\Practice\Projects\Black Friday Datset\LinearModel.pkl","rb"))

Y_predicted1=LinearModel.predict(final_features)

Y_predicted1

